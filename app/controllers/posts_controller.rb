class PostsController < ApplicationController
  # use a before_action filter to call the require_sign_in method
  # before each of our controller actions, EXCEPT for the show action
  before_action :require_sign_in, except: :show
 # before_action :authorize_moderator, only: [:create, :new, :update, :edit]
  # if current-user isn't authorized based on their role,
  # redirect to post show view
  before_action :authorize_user, except: [:show, :new, :create]

  def show
    # find the post that corresponds to the id in the params that were passed to
    # show and assign it to @post.Populate the instance var in a SINGLE post
    @post = Post.find(params[:id])
  end

  def new
  #create an instance var, @post
  #then assign it an empty post returned by Post.new
    @topic = Topic.find(params[:topic_id])   # added to for nesting posts in topic
    @post = Post.new
  end

  def create
   @topic = Topic.find(params[:topic_id])
   @post = @topic.posts.build(post_params)
   # assign @post.user to current_user to properly scope the new post
   @post.user = current_user
   #if successful save, display success message with flash[:noteice]
   #and redirect user to route generated by @post
   if @post.save
      # assign a value to flash[:notice] The flash has provides
      # a way to pass temp values between actions. Avail in next action
     # then deleted
     flash[:notice] = "Post was saved."
     redirect_to [@post.topic, @post]
   else
   # if not successful in save, display error, render the new view again
     flash.now[:alert] = "There was an error saving the post. Please try again."
     render :new
   end
  end

  def edit
    @post = Post.find(params[:id])
  end

  def update
    @post = Post.find(params[:id])
    @post.assign_attributes(post_params)

    if @post.save
      flash[:notice] = "Post was updated."
      redirect_to [@post.topic, @post]
   else
     flash.now[:alert] = "An error occurred in saving your post. Please try again."
     render :edit
    end
  end

  def destroy
    @post = Post.find(params[:id])

    # call destroy on post, if successful set set a flash message & return to posts index view
    # if destroy fails, set a alert message and return to show view
    if @post.destroy
      flash[:notice] = "\"#{@post.title}\" was deleted successfully."
      redirect_to @post.topic
    else
      flash.now[:alert] = "There was an error in deleting your post."
      render :show
    end
  end

  # remember to add private methods at very bottom
  # any method after private will be private
  private

  def post_params
    params.require(:post).permit(:title, :body)
  end

  def authorize_user
    post = Post.find(params[:id])
    unless current_user == post.user || current_user.admin?
      # members and moderators are not allowed to delete posts
      if self.action_name == 'destroy'
        auth_failure('admin', post)
      # moderators can create or edit any post
      else
        unless current_user.moderator?
          auth_failure('moderator or an admin', post)
        end
      end
    end
  end

  def auth_failure(role, post)
     flash[:alert] = "PostsController: You must be the creator of this post or #{role == 'admin' ? 'an' : 'a'} #{role} to " \
                    "#{self.action_name == 'new' ? 'create' : self.action_name} a post. [current_user.name(role) = '#{current_user.name}(#{current_user.role})']"
    redirect_to [post.topic, post]
  end
end
